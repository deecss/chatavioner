#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Modu≈Ç OpenAI RAG dla aplikacji Aero-Chat
"""
import os
import json
import time
from datetime import datetime
import httpx
from openai import OpenAI
from reportlab.lib.pagesizes import letter, A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.enums import TA_JUSTIFY, TA_CENTER
from app.models import UploadIndex

class OpenAIRAG:
    """Klasa do obs≈Çugi RAG z OpenAI Assistants API"""
    
    def __init__(self):
        """Inicjalizuje klienta OpenAI"""
        try:
            api_key = os.getenv('OPENAI_API_KEY')
            if not api_key or 'twoj-klucz' in api_key:
                raise ValueError("Nieprawid≈Çowy klucz OpenAI API")
            
            # Konfiguracja proxy je≈õli jest ustawiona
            proxy_url = os.getenv("HTTPS_PROXY") or os.getenv("HTTP_PROXY")
            if proxy_url:
                transport = httpx.HTTPTransport(proxy=proxy_url)
                http_client = httpx.Client(transport=transport, timeout=30.0)
            else:
                http_client = httpx.Client(timeout=30.0)
            
            # Inicjalizuj klienta OpenAI z poprawnƒÖ konfiguracjƒÖ
            self.client = OpenAI(
                api_key=api_key,
                http_client=http_client
            )
            
            self.assistant_id = os.getenv('ASSISTANT_ID')
            self.model = "gpt-4o"
            
            # Sprawd≈∫ czy assistant_id jest pusty lub zawiera placeholder
            if not self.assistant_id or self.assistant_id.strip() == '' or 'twoj-assistant' in self.assistant_id:
                print("üîÑ Brak ID asystenta, tworzƒô nowego...")
                self.assistant_id = self.create_assistant()
            else:
                # Sprawd≈∫ czy asystent nadal istnieje
                try:
                    self.client.beta.assistants.retrieve(self.assistant_id)
                    print(f"‚úÖ Asystent znaleziony: {self.assistant_id}")
                except Exception as e:
                    print(f"‚ö†Ô∏è  Asystent {self.assistant_id} nie istnieje, tworzƒô nowego...")
                    self.assistant_id = self.create_assistant()
                
        except Exception as e:
            print(f"‚ùå B≈ÇƒÖd inicjalizacji OpenAI: {e}")
            raise
    
    def create_assistant(self):
        """Tworzy nowego asystenta AI"""
        try:
            print("üîÑ Tworzenie nowego asystenta OpenAI...")
            assistant = self.client.beta.assistants.create(
                name="Aero-Chat Assistant",
                instructions="""Jeste≈õ ekspertem w dziedzinie lotnictwa i awioniki. 
                Twoje zadanie to odpowiadanie na pytania zwiƒÖzane z:
                - Zasadami lotu i aerodynamikƒÖ
                - KonstrukcjƒÖ i systemami statk√≥w powietrznych
                - Przepisami lotniczymi (ICAO, EASA, FAA)
                - NawigacjƒÖ lotniczƒÖ
                - MeteorologiƒÖ lotniczƒÖ
                - Bezpiecze≈Ñstwem lot√≥w
                - Systemami awionicznymi
                
                BARDZO WA≈ªNE - FORMATOWANIE ODPOWIEDZI:
                Odpowiadaj zawsze w jƒôzyku polskim w formacie Markdown:
                
                # G≈Ç√≥wny tytu≈Ç (je≈õli potrzebny)
                ## Podtytu≈Ç dla g≈Ç√≥wnych sekcji
                ### Podtytu≈Ç dla podsekcji
                
                **Pogrubiony tekst** dla wa≈ºnych pojƒôƒá.
                
                U≈ºywaj list punktowanych:
                - Punkt pierwszy
                - Punkt drugi
                - Punkt trzeci
                
                Lub list numerowanych:
                1. Pierwszy element
                2. Drugi element
                3. Trzeci element
                
                Dziel odpowied≈∫ na logiczne sekcje z nag≈Ç√≥wkami. Ka≈ºdy akapit powinien byƒá zwiƒôz≈Çy ale wyczerpujƒÖcy.
                
                Strukturyzuj odpowiedzi aby by≈Çy czytelne i profesjonalne:
                - Zaczynaj od kr√≥tkiego wprowadzenia
                - Podziel tre≈õƒá na logiczne sekcje
                - Zako≈Ñcz podsumowaniem lub praktycznymi wskaz√≥wkami
                
                Je≈õli nie jeste≈õ pewien odpowiedzi, powiedz o tym otwarcie.
                
                Kiedy otrzymasz listƒô dostƒôpnych dokument√≥w PDF, wybierz maksymalnie 10 najwa≈ºniejszych 
                dla danego pytania i zwr√≥ƒá ich nazwy.""",
                model=self.model,
                tools=[{"type": "file_search"}]
            )
            
            # Zapisz ID asystenta do .env
            self.save_assistant_id_to_env(assistant.id)
            
            print(f"‚úÖ Nowy asystent utworzony: {assistant.id}")
            return assistant.id
            
        except Exception as e:
            print(f"‚ùå B≈ÇƒÖd podczas tworzenia asystenta: {str(e)}")
            print(f"üí° Sprawd≈∫ czy klucz OpenAI API jest poprawny")
            return None
    
    def save_assistant_id_to_env(self, assistant_id):
        """Zapisuje ID asystenta do pliku .env"""
        try:
            env_file = '.env'
            if os.path.exists(env_file):
                with open(env_file, 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                
                # Znajd≈∫ i zaktualizuj liniƒô ASSISTANT_ID
                updated = False
                for i, line in enumerate(lines):
                    if line.startswith('ASSISTANT_ID='):
                        lines[i] = f'ASSISTANT_ID={assistant_id}\n'
                        updated = True
                        break
                
                # Je≈õli nie znaleziono, dodaj na ko≈Ñcu
                if not updated:
                    lines.append(f'ASSISTANT_ID={assistant_id}\n')
                
                # Zapisz z powrotem
                with open(env_file, 'w', encoding='utf-8') as f:
                    f.writelines(lines)
                    
                print(f"üíæ ID asystenta zapisany do .env: {assistant_id}")
                
        except Exception as e:
            print(f"‚ö†Ô∏è  Nie uda≈Ço siƒô zapisaƒá ID asystenta do .env: {e}")
    
    def select_relevant_documents(self, query, max_docs=10):
        """Wybiera najistotniejsze dokumenty dla zapytania"""
        print(f"üîç Wybieranie dokument√≥w dla zapytania: {query[:50]}...")
        
        upload_index = UploadIndex()
        all_files = upload_index.get_all_files()
        
        print(f"üîç Znaleziono {len(all_files)} plik√≥w w indeksie")
        
        if not all_files:
            print("‚ö†Ô∏è  Brak plik√≥w w indeksie!")
            return []
        
        # Prosta heurystyka - mo≈ºesz to ulepszyƒá
        # Na razie zwracamy pierwszych max_docs plik√≥w
        selected = all_files[:max_docs]
        print(f"üîç Wybrano {len(selected)} plik√≥w: {selected[:3]}...")
        return selected
    
    def create_vector_store_with_files(self, file_paths):
        """Tworzy vector store z wybranymi plikami"""
        try:
            # Utw√≥rz vector store
            vector_store = self.client.beta.vector_stores.create(
                name=f"temp_store_{int(time.time())}"
            )
            
            # Przes≈Çij pliki
            file_ids = []
            for file_path in file_paths:
                full_path = os.path.join('uploads', file_path)
                if os.path.exists(full_path):
                    with open(full_path, 'rb') as f:
                        file_obj = self.client.files.create(
                            file=f,
                            purpose="assistants"
                        )
                        file_ids.append(file_obj.id)
            
            # Dodaj pliki do vector store
            if file_ids:
                self.client.beta.vector_stores.file_batches.create(
                    vector_store_id=vector_store.id,
                    file_ids=file_ids
                )
            
            return vector_store.id, file_ids
            
        except Exception as e:
            print(f"B≈ÇƒÖd podczas tworzenia vector store: {str(e)}")
            return None, []
    
    def generate_response_stream(self, query, context, session_id):
        """Generuje odpowied≈∫ w trybie strumieniowym"""
        try:
            print(f"üîç Rozpoczynam generowanie odpowiedzi dla: {query[:50]}...")
            
            # Wybierz istotne dokumenty
            relevant_docs = self.select_relevant_documents(query)
            print(f"üîç Wybrano {len(relevant_docs)} dokument√≥w: {relevant_docs[:3]}...")
            
            # Utw√≥rz vector store z dokumentami
            vector_store_id, file_ids = self.create_vector_store_with_files(relevant_docs)
            print(f"üîç Vector store ID: {vector_store_id}, Pliki: {len(file_ids)}")
            
            # Przygotuj kontekst rozmowy
            messages = []
            for msg in context:
                messages.append({
                    "role": msg["role"],
                    "content": msg["content"]
                })
            
            # Dodaj aktualne pytanie
            messages.append({
                "role": "user",
                "content": query
            })
            
            print(f"üîç Przygotowano {len(messages)} wiadomo≈õci w kontek≈õcie")
            
            # Utw√≥rz wƒÖtek
            print(f"üîç Tworzƒô wƒÖtek z asystentem {self.assistant_id}")
            thread = self.client.beta.threads.create(
                messages=messages,
                tool_resources={
                    "file_search": {
                        "vector_store_ids": [vector_store_id] if vector_store_id else []
                    }
                }
            )
            
            print(f"üîç WƒÖtek utworzony: {thread.id}")
            
            # Uruchom asystenta
            print(f"üîç Uruchamiam asystenta w trybie strumieniowym...")
            run = self.client.beta.threads.runs.create(
                thread_id=thread.id,
                assistant_id=self.assistant_id,
                stream=True
            )
            
            # Przetw√≥rz strumie≈Ñ odpowiedzi
            response_text = ""
            chunk_count = 0
            for event in run:
                if event.event == 'thread.message.delta':
                    for content in event.data.delta.content:
                        if content.type == 'text':
                            chunk = content.text.value
                            response_text += chunk
                            chunk_count += 1
                            if chunk_count <= 3:  # Loguj tylko pierwsze 3 chunki
                                print(f"üîç Otrzymano chunk #{chunk_count}: {chunk[:30]}...")
                            yield chunk
            
            print(f"üîç Otrzymano ≈ÇƒÖcznie {chunk_count} chunk√≥w, d≈Çugo≈õƒá odpowiedzi: {len(response_text)}")
            
            # Poczekaj na zako≈Ñczenie
            time.sleep(1)
            
            # Usu≈Ñ tymczasowe zasoby
            self.cleanup_resources(vector_store_id, file_ids, thread.id)
            print(f"üîç Zako≈Ñczono generowanie odpowiedzi")
            
        except Exception as e:
            print(f"‚ùå B≈ÇƒÖd podczas generowania odpowiedzi: {str(e)}")
            import traceback
            traceback.print_exc()
            yield f"Przepraszam, wystƒÖpi≈Ç b≈ÇƒÖd: {str(e)}"
    
    def cleanup_resources(self, vector_store_id, file_ids, thread_id):
        """Usuwa tymczasowe zasoby"""
        try:
            # Usu≈Ñ pliki
            for file_id in file_ids:
                try:
                    self.client.files.delete(file_id)
                except:
                    pass
            
            # Usu≈Ñ vector store
            if vector_store_id:
                try:
                    self.client.beta.vector_stores.delete(vector_store_id)
                except:
                    pass
            
            # Usu≈Ñ wƒÖtek
            if thread_id:
                try:
                    self.client.beta.threads.delete(thread_id)
                except:
                    pass
                    
        except Exception as e:
            print(f"B≈ÇƒÖd podczas usuwania zasob√≥w: {str(e)}")
    
    def generate_pdf_report(self, content, session_id, message_id=None):
        """Generuje raport PDF z odpowiedzi"""
        try:
            # Utw√≥rz katalog dla sesji
            reports_dir = f'reports/{session_id}'
            os.makedirs(reports_dir, exist_ok=True)
            
            # Nazwa pliku PDF
            if message_id:
                filename = f'answer_{message_id}.pdf'
            else:
                filename = f'answer_{int(time.time())}.pdf'
            
            filepath = os.path.join(reports_dir, filename)
            
            # Utw√≥rz dokument PDF
            doc = SimpleDocTemplate(filepath, pagesize=A4)
            
            # Style
            styles = getSampleStyleSheet()
            title_style = ParagraphStyle(
                'CustomTitle',
                parent=styles['Heading1'],
                fontSize=18,
                alignment=TA_CENTER,
                spaceAfter=30
            )
            
            normal_style = ParagraphStyle(
                'CustomNormal',
                parent=styles['Normal'],
                fontSize=12,
                alignment=TA_JUSTIFY,
                spaceAfter=12
            )
            
            # Tre≈õƒá dokumentu
            story = []
            
            # Tytu≈Ç
            story.append(Paragraph("Aero-Chat - Raport Odpowiedzi", title_style))
            story.append(Spacer(1, 12))
            
            # Data
            story.append(Paragraph(f"Data: {datetime.now().strftime('%d.%m.%Y %H:%M')}", normal_style))
            story.append(Paragraph(f"Sesja: {session_id}", normal_style))
            story.append(Spacer(1, 20))
            
            # Odpowied≈∫
            story.append(Paragraph("Odpowied≈∫:", styles['Heading2']))
            
            # Podziel tre≈õƒá na akapity
            paragraphs = content.split('\n\n')
            for para in paragraphs:
                if para.strip():
                    story.append(Paragraph(para.strip(), normal_style))
            
            # Zbuduj PDF
            doc.build(story)
            
            return filepath
            
        except Exception as e:
            print(f"B≈ÇƒÖd podczas generowania PDF: {str(e)}")
            return None
